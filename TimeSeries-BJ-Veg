// GEE path: https://code.earthengine.google.com/c3b87417e82cf63d474742da995481a5

/* 
GDAA2030 Assignment 3 - Change Detection & Time Series Analysis
Author: Cindy Lu
Date: April 3, 2023
*/

/* 
In this assignment, a change detection and time series analysis will be completed in
and around Beijing, the capital of China, during summer months between 2013 and 2021.
*/

/////////////////////////////////////////////////////////////////////////////
// 1. Image Preparation

/* Landsat-8 imageries bounding the Beijing area will be used in this assignment. 
The scaling factors are applied to the image collection bands to account for  
signal intensity variations. Relevant bands are then selected for further analysis. */

// Set centre of Beijing as point of interest (POI)
var bj_pt = ee.Geometry.Point([116.3868,39.8988])

// Set Landsat-8 data source bounding POI
var landsat8 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
    .filterBounds(bj_pt)

// Create function to apply scale factors
function applyScaleFactors(image) {
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);
  return image.addBands(opticalBands, null, true)
              .addBands(thermalBands, null, true);
}

// Apply scale factors, select and rename relevant spectral bands
var landsat8_scaled = landsat8.map(applyScaleFactors)
    .select(
      ['SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B6', 'SR_B7'],
      ['blue', 'green', 'red', 'nir', 'swir1', 'swir2']);

// Retrieve 'Pre' (summer 2013) and 'Post' (summer 2021) images around POI 
var preImage = landsat8_scaled
    .filterDate('2013-05-01', '2013-08-30')
    .sort('CLOUD_COVER', true)
    .first();
var postImage = landsat8_scaled
    .filterDate('2021-05-01', '2021-08-30')
    .sort('CLOUD_COVER', true)
    .first();

// Print properties of Pre and Post image to console
print("Pre image properties:", preImage);
print("Post image properties:", postImage);

// Set map visualization parameters for True and False Color composites
var visPara_true = {
  bands: ['red', 'green', 'blue'],
  min: 0.0,
  max: 0.3
};

var visPara_false = {
  bands: ['red', 'nir', 'swir2'],
  min: 0,
  max: 0.3
};

// Add map layers for Pre and Post image in both true color and false color composite.
Map.centerObject(bj_pt, 11);
Map.addLayer(preImage, visPara_true, 'Pre - 2013 (true color)');
Map.addLayer(postImage, visPara_true, 'Post - 2021 (true color)');
Map.addLayer(preImage, visPara_false, 'Pre - 2013 (false color)');
Map.addLayer(postImage, visPara_false, 'Post - 2021 (false color)');


/////////////////////////////////////////////////////////////////////////////
// 2. Change Detection

/* While urbanization and land development was inevidable in a metropolitan city 
like Beijing, I'm interested in evaluating greenery or vegetation cover change
between 2013 and 2021. Normalized Difference Vegetation Index (NDVI) will be
used as the indicator. */

// Examine image properties (Landsat bands) in 2013 and 2021 within inner Beijing 

var bj_2013 = landsat8_scaled
    .filterDate('2013-01-01', '2013-12-31')
    .filter(ee.Filter.lt('CLOUD_COVER', 30))
    
print('2013 Image collection properties:',bj_2013)

/* Note that Landsat8 image initiated in March 2013. There are a total of 9 images in the 2013 collection,
and the first image was from May 2013. This analysis focuses on the summer months when vegetation
growth peaks and without effects from snow. Therefore this output is acceptable, the same time range
will be applied in the 2021 collection. */

var bj_2021 = landsat8_scaled
    .filterDate('2021-05-01', '2021-12-31')
    .filter(ee.Filter.lt('CLOUD_COVER', 30))

print('2021 Image collection properties:', bj_2021)

// Set inner Beijing as target reducer region for statistical calculations (e.g. band means)
// For visual reference of the region, turn on 'bj' geometry layer.
var innerBJ = ee.Geometry.Polygon(
    [
      [
          [116.23578701039014,39.77434664762745],
          [116.54340419789014,39.77434664762745],
          [116.54340419789014,40.02508995902527],
          [116.23578701039014,40.02508995902527],
          [116.23578701039014,39.77434664762745]
      ]
    ], null, false);


// View scaled band values across all images in 2013 and 2021
var chart_bj_2013 = ui.Chart.image.series({
    imageCollection: bj_2013,
    region: innerBJ,
    reducer: ee.Reducer.mean(),
    scale: 40})
  .setOptions({title: '2013 Landsat 8 Mean Band Values in Beijing',
    hAxis: {title: 'Date'},
    vAxis: {title: 'Band Mean'},
    colors: ['blue','green', 'orange','red','purple','teal']
  });

var chart_bj_2021 = ui.Chart.image.series({
    imageCollection: bj_2021,
    region: innerBJ,
    reducer: ee.Reducer.mean(),
    scale: 40})
  .setOptions({title: '2021 Landsat 8 Mean Band Values in Beijing',
    hAxis: {title: 'Date'},
    vAxis: {title: 'Band Mean'},
    colors: ['blue','green', 'orange','red','purple','teal']
  });

// Print charts in console
print('2013 Image band properties', chart_bj_2013);
print('2021 Image band properties', chart_bj_2021);


// Calculate NDVI
var ndviPre = preImage.normalizedDifference(['nir','red']).rename('ndvi_pre')
var ndviPost = postImage.normalizedDifference(['nir','red']).rename('ndvi_post')

// Calculate difference between 2 images, and map the difference
var diff = ndviPost.subtract(ndviPre).rename('change');

var visParams = {
    palette: ['ee4d5a', 'f97b57', 'efc47e', 'efc47e', 'ecda9a',
    '97e196', '6cc08b', '217a79', '217a79', '074050'],
    min: -0.5,
    max: 0.5
};
Map.addLayer(diff, visParams, 'NDVI change');

// Set change threshold and reclassify the pixels accordingly
var thresholdGain = 0.3;
var thresholdLoss = -0.3;

var diffClassified = ee.Image(0);

// Reclassed as '1' if the pixel value difference is greater than '0.3'
// and as '2' if the difference is lower than '-0.3'
diffClassified = diffClassified.where(diff.gte(thresholdGain), 1);
diffClassified = diffClassified.where(diff.lte(thresholdLoss), 2);

var changeVis = {
    palette: 'white,2659eb,fa1373',
    min: 0,
    max: 2
};

Map.addLayer(diffClassified.selfMask(),
    changeVis,
    'NDVI change over +/- 0.3');

/////////////////////////////////////////////////////////////////////////////
// 3. Time Series Analysis

// Time series analysis can be used to further explore the changes and unfold potential 
// trends throughout the years. 

// Create a time series collection of all Landsat-8 images in summer months 
var landsat8_ts = landsat8_scaled
  .filter(ee.Filter.calendarRange(5, 8, 'month'))
  .filter(ee.Filter.lt('CLOUD_COVER', 30));

// Add NDVI as a band to the image collection
function addNDVI(image) {
  var ndvi = image.normalizedDifference(['nir', 'red']).rename('ndvi');
  return image.addBands(ndvi);
}

var collection = landsat8_ts.map(addNDVI);

// Print properties of the image collection to console
print('Annual image collection properties:', collection);


// Create an annual composite from start of Landsat 8's collection (2013)
// Define a function to retrieve annual composite for specified year
function getAnnualComposite(year) {
  var startDate = ee.Date.fromYMD(year, 1, 1);
  var endDate = startDate.advance(1, 'year');
  var composite = collection.filterDate(startDate, endDate).median();
  return composite;
}

// Define a function to update the map with the selected year
function updateMap(year) {
  var image = getAnnualComposite(year);
  var visParams = {bands: ['red', 'green', 'blue'], min: 0, max: 0.3};
  Map.layers().set(0, ui.Map.Layer(image, visParams, 'Image for ' + year));
}

var initialYear = 2013;
var initialImage = getAnnualComposite(initialYear);
var visParams = {bands: ['red', 'green', 'blue'], min: 0, max: 0.3};

// Create and add a slider widget for selecting the year
var slider = ui.Slider({
  min: 2013,
  max: 2022,
  step: 1,
  onChange: updateMap,
  style: {width: '300px', padding: '10px'}
});

Map.add(slider);
// Click on the slider to activate map display, and turn off other layers to view time series map

// Create time series chart for key spectral bands and ndvi
var chart_bj = ui.Chart.image.series({
    imageCollection: collection
      .select(['nir','red', 'ndvi']),
    region: innerBJ,
    reducer: ee.Reducer.median(),
    scale: 40})
  .setOptions({
    title: 'Landsat 8 Time Series in Beijing (May-August)',
    hAxis: {title: 'Date'},
    vAxis: {title: 'Band Median'},
    colors: ['green', 'orange','red'],
    trendlines: {
          0: {type: 'linear', color: 'grey', opacity: 0.5},
          1: {type: 'linear', color: 'grey', opacity: 0.5},
          2: {type: 'linear', color: 'grey', opacity: 0.5}
        }
  });

// Show the chart in the Console.
print('Time series plot for inner Beijing', chart_bj);
